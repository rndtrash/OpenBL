//-----------------------------------------------------------------------------
// Torque Game Engine
// Copyright (C) GarageGames.com, Inc.
//-----------------------------------------------------------------------------


#ifndef _COMPILER_H_
#define _COMPILER_H_

class Stream;
class DataChunker;

#include "platform/platform.h"
#include "console/ast.h"
#include "console/codeBlock.h"

// Autogenerated, so we should only ever include from once place - here.
// (We can't stick include guards in it without patching bison.)
#ifndef _CMDGRAM_H_
#define _CMDGRAM_H_
#include "console/cmdgram.h"
#endif

namespace Compiler
{
   /// The opcodes for the TorqueScript VM.
   enum CompiledInstructions
   {
      OP_CREATE_OBJECT = 0x00, // confirmed
      OP_FUNC_DECL = 0x01, // confirmed
      NOOP1 = 0x02, // confirmed
      NOOP2 = 0x03, // confirmed
      OP_ADD_OBJECT = 0x04, // confirmed
      OP_JMPIFNOT = 0x05, // confirmed
      OP_SAVEVAR_FLT = 0x06, // confirmed
      OP_SAVEVAR_STR = 0x07, // confirmed
      OP_SETCUROBJECT = 0x08, // confirmed
      OP_STR_TO_FLT = 0x09, // confirmed
      NOOP3 = 0x0A, // confirmed
      OP_MUL = 0x0B,
      OP_END_OBJECT = 0x0C, // confirmed
      OP_CMPLE = 0x0D, // confirmed
      OP_CMPLT = 0x0E, // confirmed
      OP_DIV = 0x0F,
      OP_FLT_TO_UINT = 0x10,
      OP_ADD = 0x11,
      OP_SUB = 0x12,
      UNKNOWN = 0x13,
      OP_NEG = 0x14,
      OP_MOD = 0x15, // confirmed
      OP_LOADFIELD_UINT = 0x16, // confirmed
      OP_STR_TO_UINT = 0x17, // confirmed

      OP_NOTF = 0x18,

      OP_CMPEQ = 0x19, // confirmed
      OP_CMPGE = 0x1A, // confirmed
      OP_CMPNE = 0x1B, // confirmed
      OP_OR = 0x1C, // confirmed

      OP_AND = 0x1D, // confirmed
      OP_XOR = 0x1E, // confirmed
      OP_RETURN = 0x1F, // confirmed
      OP_CMPGR = 0x20, // confirmed
      OP_BITAND = 0x21, // confirmed

      OP_ONESCOMPLEMENT = 0x22, // confirmed
      OP_SHR = 0x23, // confirmed
      OP_SHL = 0x24, // confirmed
      OP_BITOR = 0x25, // confirmed

      OP_LOADVAR_FLT = 0x26, // confirmed
      OP_SAVEFIELD_FLT = 0x27, // confirmed
      OP_SAVEFIELD_STR = 0x28, // confirmed

      OP_LOADVAR_STR = 0x29,  // confirmed
      OP_JMPIFF = 0x2A,
      OP_LOADFIELD_STR = 0x2B, // confirmed

      OP_SAVEFIELD_UINT = 0x2C, // confirmed
      OP_CALLFUNC = 0x2D, // confirmed

      OP_REWIND_STR = 0x2E, // confirmed
      OP_PUSH_FRAME = 0x2F,  // confirmed

      OP_BREAK = 0x30, // confirmed
      OP_SAVEVAR_UINT = 0x31, // confirmed
      OP_JMPIF = 0x32,

      OP_JMPIFNOT_NP = 0x33,
      OP_UINT_TO_NONE = 0x34,
      OP_LOADFIELD_FLT = 0x35,

      OP_SETCURVAR = 0x36, // confirmed
      OP_SETCURVAR_CREATE = 0x37, // confirmed
      OP_SETCUROBJECT_NEW = 0x38, // confirmed
      OP_SETCURVAR_ARRAY = 0x39, // confirmed
      OP_FLT_TO_STR = 0x3A,
      UNKNOWN4 = 0x3B,
      OP_UINT_TO_FLT = 0x3C,
      OP_SETCURVAR_ARRAY_CREATE = 0x3D, // confirmed
      OP_LOADVAR_UINT = 0x3E, // confirmed

      OP_LOADIMMED_UINT = 0x3F,
      OP_SETCURFIELD_ARRAY = 0x40,
      NOOP4 = 0x41, // confirmed
      OP_ADVANCE_STR = 0x42,  // confirmed
      OP_ADVANCE_STR_APPENDCHAR = 0x43, // confirmed

      OP_TERMINATE_REWIND_STR = 0x44, // confirmed
      OP_COMPARE_STR = 0x45, // confirmed

      OP_PUSH = 0x46, // confirmed
      OP_ADVANCE_STR_COMMA = 0x47, // confirmed
      OP_ADVANCE_STR_NUL = 0x48, // confirmed
      OP_FLT_TO_NONE = 0x49,  // confirmed
      OP_SETCURFIELD = 0x4A,
      OP_UINT_TO_STR = 0x4B, // confirmed
      OP_STR_TO_NONE = 0x4C,

      OP_LOADIMMED_FLT = 0x4E, // confirmed

      OP_TAG_TO_STR = 0x4F, // confirmed
      OP_LOADIMMED_STR = 0x50, // confirmed

      OP_CALLFUNC_RESOLVE = 0x52, // confirmed

      OP_INVALID,

      // unknown opcodes:
      OP_JMPIFFNOT,
      OP_JMPIF_NP,
      OP_JMP,
      OP_NOT,
      OP_LOADIMMED_IDENT,

   };

   //------------------------------------------------------------

   F64 consoleStringToNumber(const char *str, StringTableEntry file = 0, U32 line = 0);
   U32 precompileBlock(StmtNode *block, U32 loopCount);
   U32 compileBlock(StmtNode *block, U32 *codeStream, U32 ip, U32 continuePoint, U32 breakPoint);

   //------------------------------------------------------------

   struct CompilerIdentTable
   {
      struct Entry
      {
         U32 offset;
         U32 ip;
         Entry *next;
         Entry *nextIdent;
      };
      Entry *list;
      void add(StringTableEntry ste, U32 ip);
      void reset();
      void write(Stream &st);
   };

   //------------------------------------------------------------

   struct CompilerStringTable
   {
      U32 totalLen;
      struct Entry
      {
         char *string;
         U32 start;
         U32 len;
         bool tag;
         Entry *next;
      };
      Entry *list;

      char buf[256];

      U32 add(const char *str, bool caseSens = true, bool tag = false);
      U32 addIntString(U32 value);
      U32 addFloatString(F64 value);
      void reset();
      char *build();
      void write(Stream &st);
   };

   //------------------------------------------------------------

   struct CompilerFloatTable
   {
      struct Entry
      {
         F64 val;
         Entry *next;
      };
      U32 count;
      Entry *list;

      U32 add(F64 value);
      void reset();
      F64 *build();
      void write(Stream &st);
   };

   //------------------------------------------------------------

   inline StringTableEntry U32toSTE(U32 u)
   {
      return *((StringTableEntry *) &u);
   }

   extern U32 (*STEtoU32)(StringTableEntry ste, U32 ip);

   U32 evalSTEtoU32(StringTableEntry ste, U32);
   U32 compileSTEtoU32(StringTableEntry ste, U32 ip);

   CompilerStringTable *getCurrentStringTable();
   CompilerStringTable &getGlobalStringTable();
   CompilerStringTable &getFunctionStringTable();

   void setCurrentStringTable (CompilerStringTable* cst);

   CompilerFloatTable *getCurrentFloatTable();
   CompilerFloatTable &getGlobalFloatTable();
   CompilerFloatTable &getFunctionFloatTable();

   void setCurrentFloatTable (CompilerFloatTable* cst);

   CompilerIdentTable &getIdentTable();

   void precompileIdent(StringTableEntry ident);

   CodeBlock *getBreakCodeBlock();
   void setBreakCodeBlock(CodeBlock *cb);

   /// Helper function to reset the float, string, and ident tables to a base
   /// starting state.
   void resetTables();

   void *consoleAlloc(U32 size);
   void consoleAllocReset();

   extern bool gSyntaxError;
};

#endif
